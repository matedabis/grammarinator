# Generated by Grammarinator 18.10r

from itertools import chain
from grammarinator.runtime import *

import singleExpressionUnlexer


class singleExpressionUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(singleExpressionUnparser, self).__init__()
        self.unlexer = unlexer
        self.set_options()

    @depthcontrol
    def singleExpression(self):
        current = self.create_node(UnparserRule(name='singleExpression'))
        return current
    singleExpression.min_depth = 0

    @depthcontrol
    def singleExpression(self):
        current = self.create_node(UnparserRule(name='singleExpression'))
        choice = self.choice([0 if [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0][i] > self.unlexer.max_depth else w * self.unlexer.weights.get(('alt_5', i), 1) for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        self.unlexer.weights[('alt_5', choice)] = self.unlexer.weights.get(('alt_5', choice), 1) * self.unlexer.cooldown
        if choice == 0:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='+'))
            current += self.singleExpression()
        elif choice == 1:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='-'))
            current += self.singleExpression()
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='('))
            current += self.create_node(UnlexerRule(src='~'))
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='('))
            current += self.create_node(UnlexerRule(src='!'))
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 4:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='*'))
            current += self.singleExpression()
        elif choice == 5:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='/'))
            current += self.singleExpression()
        elif choice == 6:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='%'))
            current += self.singleExpression()
        elif choice == 7:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='+'))
            current += self.singleExpression()
        elif choice == 8:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='-'))
            current += self.singleExpression()
        elif choice == 9:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='<<'))
            current += self.singleExpression()
        elif choice == 10:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='>>'))
            current += self.singleExpression()
        elif choice == 11:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='>>>'))
            current += self.singleExpression()
        elif choice == 12:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='<'))
            current += self.singleExpression()
        elif choice == 13:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='>'))
            current += self.singleExpression()
        elif choice == 14:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='<='))
            current += self.singleExpression()
        elif choice == 15:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='>='))
            current += self.singleExpression()
        elif choice == 16:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='=='))
            current += self.singleExpression()
        elif choice == 17:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='!='))
            current += self.singleExpression()
        elif choice == 18:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='==='))
            current += self.singleExpression()
        elif choice == 19:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='!=='))
            current += self.singleExpression()
        elif choice == 20:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='&'))
            current += self.singleExpression()
        elif choice == 21:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='^'))
            current += self.singleExpression()
        elif choice == 22:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='|'))
            current += self.singleExpression()
        elif choice == 23:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='&&'))
            current += self.singleExpression()
        elif choice == 24:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='||'))
            current += self.singleExpression()
        elif choice == 25:
            current += self.create_node(UnlexerRule(src='('))
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 26:
            current += self.unlexer.DecimalIntegerLiteral()
        elif choice == 27:
            current += self.create_node(UnlexerRule(src='null'))
        elif choice == 28:
            current += self.create_node(UnlexerRule(src='true'))
        elif choice == 29:
            current += self.create_node(UnlexerRule(src='false'))
        elif choice == 30:
            current += self.create_node(UnlexerRule(src='undefined'))
        return current
    singleExpression.min_depth = 0

    default_rule = singleExpression

